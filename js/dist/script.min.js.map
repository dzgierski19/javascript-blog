{"version":3,"sources":["script.js"],"names":["templates","tagLink","Handlebars","compile","document","querySelector","innerHTML","authorLink","tagCloudLink","authorCloudLink","event","preventDefault","activeLinks","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","classList","err","add","activeArticles","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","remove","articleSelector","getAttribute","optArticleSelector","optTitleSelector","optTitleListSelector","optArticleTagsSelector","optArticleAuthorSelector","activeArticle","generateTitleLinks","customSelector","arguments","length","titleList","articles","html","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","article","linkHTMLData","id","title","articleLink","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","links","calculateTagsParams","tags","params","max","min","tag","Math","articleId","calculateTagClass","count","articleTitle","generateTags","allTags","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","articleTagsArray","split","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","hasOwnProperty","articleTagWrapper","percentage","tagList","tagsParams","allTagsData","push","className","tagClickHandler","this","linkHTML","href","replace","tagActive","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","tagLinks","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","console","log","addClickListenersToTags","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","allLinksToTags","addEventListener","calculateAuthorsParams","authors","author","calculateAuthorClass","floor","optCloudClassCount","generateAuthors","allAuthors","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","activeTag","_step10","articleAuthorWrapper","articleAuthors","_iterator10","authorCloudList","authorParams","allAuthorsData","allAuthor","authorClickHandler","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","authorActive","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","addClickListenersToAuthors","allLinksToAuthors","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","allPostRefreshArticleList","getElementById"],"mappings":"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","file":"script.min.js","sourcesContent":["'use strict';\n\nconst templates = {\n\n  articleLink: Handlebars.compile(document.querySelector('#template-article-link').innerHTML),\n  tagLink: Handlebars.compile(document.querySelector('#template-tag-link').innerHTML),\n  authorLink: Handlebars.compile(document.querySelector('#template-author-link').innerHTML),\n  tagCloudLink: Handlebars.compile(document.querySelector('#template-tag-cloud-link').innerHTML),\n  authorCloudLink: Handlebars.compile(document.querySelector('#template-author-cloud-link').innerHTML),\n};\n\nconst titleClickHandler = function(event) {\n\n  event.preventDefault();\n\n  const clickedElement = this;\n  /* remove class 'active' from all article links  */\n\n  const activeLinks = document.querySelectorAll('.titles a.active');\n\n  for (let activeLink of activeLinks) {\n    activeLink.classList.remove('active');\n  }\n  /* add class 'active' to the clicked link */\n\n  clickedElement.classList.add('active');\n\n  /* remove class 'active' from all articles */\n\n  const activeArticles = document.querySelectorAll('.posts article.post.active');\n\n  for (let activeArticle of activeArticles) {\n    activeArticle.classList.remove('active');\n  }\n  /* get 'href' attribute from the clicked link */\n\n  const articleSelector = clickedElement.getAttribute('href');\n\n  /* find the correct article using the selector (value of 'href' attribute) */\n\n  const targetArticle = document.querySelector(articleSelector);\n\n  /* add class 'active' to the correct article */\n\n  targetArticle.classList.add('active');\n\n};\n\nconst optArticleSelector = '.post';\nconst optTitleSelector = '.post-title';\nconst optTitleListSelector = '.titles';\nconst optArticleTagsSelector = '.post-tags .list';\nconst optArticleAuthorSelector = '.post-author';\nconst optCloudClassCount  = 5;\n\nconst generateTitleLinks = function(customSelector = '') {\n\n  /* remove contents of titleList */\n\n  const titleList = document.querySelector(optTitleListSelector);\n  titleList.innerHTML = '';\n\n  /* for each article */\n\n  const articles = document.querySelectorAll(optArticleSelector + customSelector);\n  let html = '';\n\n  for (let article of articles) {\n\n    /* get the article id */\n\n    const articleId = article.getAttribute('id');\n\n    /* find the title element */\n    /* get the title from the title element */\n\n    const articleTitle = article.querySelector(optTitleSelector).innerHTML;\n\n    /* create HTML of the link */\n\n    const linkHTMLData = {id: articleId, title: articleTitle};\n    const linkHTML = templates.articleLink(linkHTMLData);\n\n    /* insert link into titleList */\n\n    html = html + linkHTML;\n  }\n\n  titleList.innerHTML = html;\n  const links = document.querySelectorAll('.titles a');\n\n  for (let link of links) {\n    link.addEventListener('click', titleClickHandler);\n  }\n};\n\ngenerateTitleLinks();\n\nconst calculateTagsParams = function (tags) {\n\n  const params = {\n    max: 0,\n    min: 999999\n  };\n\n  for (let tag in tags) {\n    params.max = Math.max(tags[tag], params.max);\n    params.min = Math.min(tags[tag], params.min);\n  }\n  return params;\n};\n\nconst calculateTagClass = function (count, params) {\n\n  const normalizedCount = count - params.min;\n  const normalizedMax = params.max - params.min;\n  const percentage = normalizedCount / normalizedMax;\n  const classNumber = Math.floor( percentage * (optCloudClassCount - 1) + 1 );\n\n  return classNumber;\n\n};\n\nconst generateTags = function (){\n\n  /* create a new variable allTags with an empty object */\n\n  let allTags = {};\n\n  /* find all articles */\n\n  const articles = document.querySelectorAll(optArticleSelector);\n\n  /* START LOOP: for every article: */\n\n  for (let article of articles) {\n\n    /* find tags wrapper */\n\n    const articleTagWrapper = article.querySelector(optArticleTagsSelector);\n\n    /* make html variable with empty string */\n\n    let html = '';\n\n    /* get tags from data-tags attribute */\n\n    const articleTags = article.getAttribute('data-tags');\n\n    /* split tags into array */\n\n    const articleTagsArray = articleTags.split(' ');\n\n    /* START LOOP: for each tag */\n\n\n    for (let tag of articleTagsArray) {\n\n      /* generate HTML of the link */\n\n      const linkHTMLData = {id: tag, title: tag};\n      const linkHTML = templates.tagLink(linkHTMLData);\n\n      /* add generated code to html variable */\n\n      html = html + linkHTML;\n\n      /* check if this link is NOT already in allTags */\n\n      if(!allTags.hasOwnProperty(tag)) {\n\n        /* add generated code to allTags array */\n\n        allTags[tag] = 1;\n\n      } else {\n\n        allTags[tag]++;\n\n      }\n      /* END LOOP: for each tag */\n\n    }\n\n    /* insert HTML of all the links into the tags wrapper */\n\n    articleTagWrapper.innerHTML = html;\n\n    /* END LOOP: for every article: */\n  }\n\n  /* find list of tags in right column */\n\n  const tagList = document.querySelector('.tags');\n\n  /* create variable for all links HTML code*/\n\n  const tagsParams = calculateTagsParams(allTags);\n\n\n  const allTagsData = {tags: []};\n\n  /* START LOOP: for each tag in allTags :*/\n\n  for (let tag in allTags) {\n\n    /* generate code of link and add it to allTagsHTML*/\n\n    allTagsData.tags.push({\n      tag: tag,\n      count: allTags[tag],\n      className: calculateTagClass(allTags[tag], tagsParams)\n    });\n  }\n\n  /* END LOOP: for each tag in allTags */\n  /* add html from allTagsHTML to tagList */\n\n  tagList.innerHTML = templates.tagCloudLink(allTagsData);\n};\n\ngenerateTags();\n\nconst tagClickHandler = function (event) {\n\n  /* prevent default action for this event */\n\n  event.preventDefault();\n\n  /* make new constant named \"clickedElement\" and give it the value of \"this\" */\n\n  const clickedElement = this;\n\n  /* make a new constant \"href\" and read the attribute \"href\" of the clicked element */\n\n  const href = clickedElement.getAttribute('href');\n\n  /* make a new constant \"tag\" and extract tag from the \"href\" constant */\n\n  const tag = href.replace('#tag-', '');\n\n  /* find all tag links with class active */\n\n  const tagActive = document.querySelectorAll('a.active[href^=\"#tag-\"]');\n\n  /* START LOOP: for each active tag link */\n\n  for (let activeTag of tagActive) {\n\n    /* remove class active */\n\n    activeTag.classList.remove('active');\n\n    /* END LOOP: for each active tag link */\n\n  }\n\n  /* find all tag links with \"href\" attribute equal to the \"href\" constant */\n\n  const tagLinks = document.querySelectorAll('a[href=\"' + href + '\"]');\n\n  /* START LOOP: for each found tag link */\n\n  for (let tagLink of tagLinks) {\n\n    /* add class active */\n\n    tagLink.classList.add('active');\n\n    /* END LOOP: for each found tag link */\n\n  }\n\n  /*  execute function \"generateTitleLinks\" with article selector as argument */\n\n  generateTitleLinks('[data-tags~=\"' + tag + '\"]');\n  console.log(generateTitleLinks);\n\n};\n\nconst addClickListenersToTags = function () {\n\n  /* find all links to tags */\n\n  const allLinksToTags = document.querySelectorAll ('a[href^=\"#tag-\"]');\n\n  /* START LOOP: for each link */\n\n  for (let allLinkToTags of allLinksToTags) {\n\n    /* add tagClickHandler as event listener for that link */\n\n    allLinkToTags.addEventListener('click', tagClickHandler);\n\n    /* END LOOP: for each link */\n\n  }\n};\n\naddClickListenersToTags();\n\nconst calculateAuthorsParams = function (authors) {\n\n  const params = {\n    max: 0,\n    min: 999999\n  };\n\n  for (let author in authors) {\n    params.max = Math.max(authors[author], params.max);\n    params.min = Math.min(authors[author], params.min);\n  }\n  return params;\n};\n\nconst calculateAuthorClass = function (count, params) {\n\n  const normalizedCount = count - params.min;\n  const normalizedMax = params.max - params.min;\n  const percentage = normalizedCount / normalizedMax;\n  const classNumber = Math.floor( percentage * (optCloudClassCount - 1) + 1 );\n  return classNumber;\n\n};\n\n\nconst generateAuthors = function (){\n\n  /* create a new variable allTags with an empty object */\n  let allAuthors = {};\n\n  /* find all articles */\n\n  const articles = document.querySelectorAll(optArticleSelector);\n\n  /* START LOOP: for every article: */\n\n  for (let article of articles) {\n\n    /* find tags wrapper */\n\n    const articleAuthorWrapper = article.querySelector(optArticleAuthorSelector);\n\n    /* make html variable with empty string */\n\n    let html = '';\n\n    /* get tags from data-tags attribute */\n\n    const articleAuthors = article.getAttribute('data-author');\n\n    /* generate HTML of the link */\n\n    const linkHTMLData = {id: articleAuthors, title: articleAuthors};\n    const linkHTML = templates.authorLink(linkHTMLData);\n\n    /* add generated code to html variable */\n\n    html = html + linkHTML;\n    /* check if this link is NOT already in allTags */\n\n    if(!allAuthors.hasOwnProperty(articleAuthors)) {\n\n      /* add generated code to allTags array */\n\n      allAuthors[articleAuthors] = 1;\n\n    } else {\n\n      allAuthors[articleAuthors]++;\n\n    }\n\n    /* insert HTML of all the links into the tags wrapper */\n\n    articleAuthorWrapper.innerHTML = html;\n\n    /* END LOOP: for every article: */\n\n  }\n  /* find list of tags in right column */\n\n  const authorCloudList = document.querySelector('.authors');\n  /* create variable for all links HTML code*/\n\n  const authorParams = calculateAuthorsParams(allAuthors);\n\n  let allAuthorsData = {authors: []};\n\n  /* generate code of link and add it to allTagsHTML*/\n  for (let allAuthor in allAuthors ) {\n\n    allAuthorsData.authors.push({\n\n      author: allAuthor,\n      count: allAuthors[allAuthor],\n      className: calculateAuthorClass(allAuthors[allAuthor], authorParams)\n\n    });\n    /* END LOOP: for each tag in allTags */\n  }\n  /* add html from allTagsHTML to tagList */\n\n  authorCloudList.innerHTML = templates.authorCloudLink(allAuthorsData);\n};\n\ngenerateAuthors();\n\nconst authorClickHandler = function (event) {\n\n  /* prevent default action for this event */\n\n  event.preventDefault();\n\n  /* make new constant named \"clickedElement\" and give it the value of \"this\" */\n\n  const clickedElement = this;\n\n  /* make a new constant \"href\" and read the attribute \"href\" of the clicked element */\n\n  const href = clickedElement.getAttribute('href');\n\n  /* make a new constant \"tag\" and extract tag from the \"href\" constant */\n\n  const author = href.replace('#author-', '');\n\n  /* find all tag links with class active */\n\n  const authorActive = document.querySelectorAll('a.active[href^=\"#author-\"]');\n\n  /* START LOOP: for each active tag link */\n\n  for (let activeAuthor of authorActive) {\n\n    /* remove class active */\n\n    activeAuthor.classList.remove('active');\n\n  }\n\n  /* find all tag links with \"href\" attribute equal to the \"href\" constant */\n\n  const authorLinks = document.querySelectorAll('a[href=\"' + href + '\"]');\n\n  /* START LOOP: for each found tag link */\n\n  for (let authorLink of authorLinks) {\n\n    /*  add class active */\n\n    authorLink.classList.add('active');\n\n    /* END LOOP: for each found tag link */\n\n  }\n\n  /* execute function \"generateTitleLinks\" with article selector as argument */\n\n  generateTitleLinks('[data-author=\"' + author + '\"]');\n\n};\n\nconst addClickListenersToAuthors = function () {\n\n  /* find all links to tags */\n\n  const allLinksToAuthors = document.querySelectorAll ('a[href^=\"#author\"]');\n\n\n  /* START LOOP: for each link */\n\n  for (let allLinkToAuthors of allLinksToAuthors) {\n\n    /* add tagClickHandler as event listener for that link */\n\n    allLinkToAuthors.addEventListener('click', authorClickHandler);\n\n    /* END LOOP: for each link */\n\n  }\n};\n\naddClickListenersToAuthors();\n\nconst allPostRefreshArticleList = document.getElementById('all-posts');\n\nallPostRefreshArticleList.addEventListener('click', function() {\n  generateTitleLinks();\n});\n\n\n"]}